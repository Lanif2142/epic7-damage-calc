import * as _ from 'lodash-es'
import { DefensePreset, ReductionPreset } from './target-presets';
//TODO: heroes will replace form with heroSpecific [] and heroSpecificMaximums {}
export class DamageFormData {
    AOEStack: number;
    artifactLevel: number;
    attack: number;
    attackImprint: number;
    attackIncreasePercent: number;
    beehooPassive: boolean;
    damageIncrease: number;
    decreasedAttack: boolean;
    casterAboveHalfHP: boolean;
    casterAttackedStack: number;
    casterAttackStack: number;
    casterCurrentHP: number;
    casterCurrentHPPercent: number;
    casterDebuffed: boolean;
    casterDefense: number;
    casterDefenseUp: boolean;
    casterEnraged: boolean;
    casterFocus: number;
    casterFullFightingSpirit: boolean;
    casterFullFocus: boolean;
    casterFury: boolean;
    casterHasBuff: boolean;
    casterHasBzzt: boolean;
    casterHasFlameAlchemist: boolean;
    casterHasImmensePower: boolean;
    casterHasMultilayerBarrier: boolean;
    casterHasNeoPhantomSword: boolean;
    casterHasStealth: boolean;
    casterInvincible: boolean;
    casterMaxHP: number;
    casterNumberOfBuffs: number;
    casterPerception: boolean;
    casterSpeed: number;
    casterSpeedUp: boolean;
    casterVigor: boolean;
    critDamage: number;
    increasedCritDamage: boolean;
    criticalHitStack: number;
    damageReduction: number;
    damageTransfer: number
    defensePercentUp: number;
    defensePreset?: DefensePreset;
    dualAttackStack: number;
    elementalAdvantage: boolean;
    enemyCounterStack: number;
    enemyDefeated: boolean;
    exclusiveEquipment1: boolean;
    exclusiveEquipment2: boolean;
    exclusiveEquipment3: boolean;
    heroID: string;
    highestAllyAttack: number;
    increasedAttack: boolean;
    increasedAttackGreat: boolean;
    molagoras1: number;
    molagoras2: number;
    molagoras3: number;
    nonAttackSkillStack: number;
    nonCasterAttackStack: number;
    numberOfDeaths: number;
    numberOfHits: number;
    numberOfTargets: number;
    penetrationSet: boolean;
    rageSet?: boolean;
    reductionPreset?: ReductionPreset;
    S3OnCooldown: boolean;
    singleAttackStack: number;
    skill3Stack: number;
    skillTreeCompleted: boolean;
    targetAsleep: boolean;
    targetAttack: number;
    targetBleedDetonate: number;
    targetBombDetonate: number;
    targetBurnDetonate: number;
    targetCurrentHP: number;
    targetCurrentHPPercent: number;
    targetDefense: number;
    targetDefenseIncrease: number;
    targetDefenseDown: boolean;
    targetDefenseUp: boolean;
    targetHasBarrier: boolean;
    targetHasBuff: boolean;
    targetHasDebuff: boolean;
    targetInjuries: number;
    targetIsHighestMaxHP: boolean;
    targetMagicNailed: boolean;
    targetMaxHP: number;
    targetNumberOfBleeds: number;
    targetNumberOfDebuffs: number;
    targetProvoked: boolean;
    targetSilenced: boolean;
    targetVigor: boolean;
    targetSpeed: number;
    targetStunned: boolean;
    targetTargeted: boolean;
    torrentSetStack: number;
    totalAllyBuffs: number;
    turnStack: number;

    constructor(data: any) {
        this.AOEStack = _.get(data, 'AOEStack', 0);
        this.artifactLevel = _.get(data, 'artifactLevel', 0);
        this.attack = _.get(data, 'attack', 2500);
        this.attackImprint = _.get(data, 'attackImprint', 0);
        this.attackIncreasePercent = _.get(data, 'attackIncreasePercent', 0);
        this.beehooPassive = _.get(data, 'beehooPassive', false);
        this.damageIncrease = _.get(data, 'damageIncrease', 0);
        this.decreasedAttack = _.get(data, 'decreasedAttack', false);
        this.casterAboveHalfHP = _.get(data, 'casterAboveHalfHP', true);
        this.casterAttackedStack = _.get(data, 'casterAttackedStack', 0);
        this.casterAttackStack = _.get(data, 'casterAttackStack', 0);
        this.casterCurrentHP = _.get(data, 'casterCurrentHP', 10000);
        this.casterCurrentHPPercent = _.get(data, 'casterCurrentHPPercent', 100);
        this.casterDebuffed = _.get(data, 'casterDebuffed', false);
        this.casterDefense = _.get(data, 'casterDefense', 1000);
        this.casterDefenseUp = _.get(data, 'casterDefenseUp', false);
        this.casterEnraged = _.get(data, 'casterEnraged', false);
        this.casterFocus = _.get(data, 'casterFocus', 0);
        this.casterFullFightingSpirit = _.get(data, 'casterFullFightingSpirit', false);
        this.casterFullFocus = _.get(data, 'casterFullFocus', false);
        this.casterFury = _.get(data, 'casterFury', false);
        this.casterHasBuff = _.get(data, 'casterHasBuff', false);
        this.casterHasBzzt = _.get(data, 'casterHasBzzt', false);
        this.casterHasFlameAlchemist = _.get(data, 'casterHasFlameAlchemist', false);
        this.casterHasImmensePower = _.get(data, 'casterHasImmensePower', false);
        this.casterHasMultilayerBarrier = _.get(data, 'casterHasMultilayerBarrier', false);
        this.casterHasNeoPhantomSword = _.get(data, 'casterHasNeoPhantomSword', false);
        this.casterHasStealth = _.get(data, 'casterHasStealth', false);
        this.casterInvincible = _.get(data, 'casterInvincible', false);
        this.casterMaxHP = _.get(data, 'casterMaxHP', 10000);
        this.casterNumberOfBuffs = _.get(data, 'casterNumberOfBuffs', 0)
        this.casterPerception = _.get(data, 'casterPerception', false);
        this.casterSpeed = _.get(data, 'casterSpeed', 150);
        this.casterSpeedUp = _.get(data, 'casterSpeedUp', false);
        this.casterVigor = _.get(data, 'casterVigor', false);
        this.critDamage = _.get(data, 'critDamage', 250);
        this.increasedCritDamage = _.get(data, 'increasedCritDamage', false);
        this.criticalHitStack = _.get(data, 'criticalHitStack', 0)
        this.damageReduction = _.get(data, 'damageReduction', 0);
        this.damageTransfer = _.get(data, 'damageTransfer', 0);
        this.defensePercentUp = _.get(data, 'defensePercentUp', 0);
        this.defensePreset = _.get(data, 'defensePreset', null);
        this.dualAttackStack = _.get(data, 'dualAttackStack', 0)
        this.elementalAdvantage = _.get(data, 'elementalAdvantage', false);
        this.enemyCounterStack = _.get(data, 'enemyCounterStack', 0)
        this.enemyDefeated = _.get(data, 'enemyDefeated', false);
        this.exclusiveEquipment1 = _.get(data, 'exclusiveEquipment1', false);
        this.exclusiveEquipment2 = _.get(data, 'exclusiveEquipment2', false);
        this.exclusiveEquipment3 = _.get(data, 'exclusiveEquipment3', false);
        this.heroID = _.get(data, 'heroID', 'abigail');
        this.highestAllyAttack = _.get(data, 'highestAllyAttack', 2500);
        this.increasedAttack = _.get(data, 'increasedAttack', false);
        this.increasedAttackGreat = _.get(data, 'increasedAttackGreat', false);
        this.molagoras1 = _.get(data, 'molagoraS1', 0);
        this.molagoras2 = _.get(data, 'molagoraS2', 0);
        this.molagoras3 = _.get(data, 'molagoraS3', 0);
        this.nonAttackSkillStack = _.get(data, 'nonAttackSkillStack', 0);
        this.nonCasterAttackStack = _.get(data, 'nonCasterAttackStack', 0);
        this.numberOfDeaths = _.get(data, 'numberOfDeaths', 0);
        this.numberOfHits = _.get(data, 'numberOfHits', 1);
        this.numberOfTargets = _.get(data, 'numberOfTargets', 0);
        this.penetrationSet = _.get(data, 'penetrationSet', false);
        this.rageSet = _.get(data, 'rageSet', false);
        this.reductionPreset = _.get(data, 'reductionPreset', null);
        this.S3OnCooldown = _.get(data, 'S3OnCooldown', false);
        this.singleAttackStack = _.get(data, 'singleAttackStack', 0);
        this.skill3Stack = _.get(data, 'skill3Stack', 0);
        this.skillTreeCompleted = _.get(data, 'skillTreeCompleted', true);
        this.targetAsleep = _.get(data, 'targetAsleep', false);
        this.targetAttack = _.get(data, 'targetAttack', 2500);
        this.targetBleedDetonate = _.get(data, 'targetBleedDetonate', 0);
        this.targetBombDetonate = _.get(data, 'targetBombDetonate', 0);
        this.targetBurnDetonate = _.get(data, 'targetBurnDetonate', 0);
        this.targetCurrentHP = _.get(data, 'targetCurrentHP', 10000);
        this.targetCurrentHPPercent = _.get(data, 'targetCurrentHPPercent', 100);
        this.targetDefense = _.get(data, 'targetDefense', 1000);
        this.targetDefenseIncrease = _.get(data, 'targetDefenseIncrease', 0);
        this.targetDefenseDown = _.get(data, 'targetDefenseDown', false);
        this.targetDefenseUp = _.get(data, 'targetDefenseUp', false);
        this.targetHasBarrier = _.get(data, 'targetHasBarrier', false);
        this.targetHasBuff = _.get(data, 'targetHasBuff', false);
        this.targetHasDebuff = _.get(data, 'targetHasDebuff', false);
        this.targetInjuries = _.get(data, 'targetInjuries', 0);
        this.targetIsHighestMaxHP = _.get(data, 'targetIsHighestMaxHP', false);
        this.targetMagicNailed = _.get(data, 'targetMagicNailed', false);
        this.targetMaxHP = _.get(data, 'targetMaxHP', 10000);
        this.targetNumberOfBleeds = _.get(data, 'targetNumberOfBleeds', 0);
        this.targetNumberOfDebuffs = _.get(data, 'targetNumberOfDebuffs', 0);
        this.targetProvoked = _.get(data, 'targetProvoked', false);
        this.targetSilenced = _.get(data, 'targetSilenced', false);
        this.targetSpeed = _.get(data, 'targetSpeed', 150);
        this.targetStunned = _.get(data, 'targetStunned', false);
        this.targetTargeted = _.get(data, 'targetTargeted', false);
        this.targetVigor = _.get(data, 'targetVigor', false);
        this.torrentSetStack = _.get(data, 'torrentSetStack', 0);
        this.totalAllyBuffs = _.get(data, 'totalAllyBuffs', 0);
        this.turnStack = _.get(data, 'turnStack', 0);
    }
}